{"version":3,"file":"static/webpack/static\\development\\pages\\register.js.e4848fa039bfcd37f71a.hot-update.js","sources":["webpack:///./pages/register.js"],"sourcesContent":["import React, { PureComponent } from 'react'\r\nimport { Mutation } from 'react-apollo';\r\nimport gql from 'graphql-tag'\r\nimport App from '../components/App'\r\nimport Loading from '../components/Loading'\r\nimport withData from '../lib/withData'\r\n\r\nimport RegisterContainer from '../containers/Register';\r\nimport SubscribeContainer from '../containers/Subscribe';\r\n\r\nconst SUBSCRIBE_MUTATION = gql`\r\n    mutation Subscribe($input: SubscribeInput) {\r\n        Subscribe(input: $input) {\r\n            message\r\n        }\r\n    }\r\n`\r\n\r\n\r\nclass RegisterPage extends PureComponent {\r\n  static getInitialProps({ query }) {\r\n    return { _id: query ? query._id : null, token: query ? query.token : null };\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      email: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      password: '',\r\n      passwordRepeat: '',\r\n      subscribeToken: this.props.token,\r\n      _id: this.props._id\r\n    }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target\r\n    this.setState({ [name]: value })\r\n  }\r\n\r\n  // handleSubscribe = () => {\r\n  //   this.setState({ isSubmitting: true, error: '', message: '' })\r\n  //   this.props.SUBSCRIBE_MUTATION({\r\n  //     variables: {\r\n  //       input: {\r\n  //         email: this.state.email\r\n  //       }\r\n  //     }\r\n  //   }).then((response) => {\r\n\r\n  //     return this.setState({ message: response.data.Subscribe.message, isSubmitting: false })\r\n  //   }).catch((error) => {\r\n  //     this.setState({ isSubmitting: false })\r\n  //     console.error(error)\r\n  //   })\r\n  // }\r\n\r\n  // handleRegister = () => {\r\n  //   this.setState({ isSubmitting: true, error: '', message: '' })\r\n  //   this.props.REGISTER_MUTATION({\r\n  //     variables: {\r\n  //       input: {\r\n  //         subscribeToken: this.state.subscribeToken,\r\n  //         firstName: this.state.firstName,\r\n  //         lastName: this.state.lastName,\r\n  //         _id: this.state._id,\r\n  //         password: this.state.password,\r\n  //         passwordRepeat: this.state.passwordRepeat\r\n  //       }\r\n  //     }\r\n  //   }).then((response) => {\r\n\r\n  //     return this.setState({ message: response.data.Register.message, isSubmitting: false })\r\n  //   }).catch((error) => {\r\n  //     return this.setState({ isSubmitting: false, error })\r\n  //   })\r\n  // }\r\n\r\n  render() {\r\n    const { _id, subscribeToken, email, firstName, lastName, password, passwordRepeat } = this.state\r\n\r\n    if (_id && subscribeToken) {\r\n      return (\r\n        <App\r\n          showNavigation={false}\r\n          title='Login'\r\n        >\r\n          <Mutation\r\n            mutation={REGISTER_MUTATION}\r\n            variables={{ input: { subscribeToken, firstName, lastName, password, passwordRepeat, _id } }}\r\n          >\r\n            {(register, { loading, error, called }) => {\r\n              return (\r\n                <RegisterContainer\r\n                  register={register}\r\n                  handleChange={this.handleChange}\r\n                  email={email}\r\n                  error={error}\r\n                  firstName={firstName}\r\n                  lastName={lastName}\r\n                  password={password}\r\n                  passwordRepeat={passwordRepeat}\r\n                />\r\n              );\r\n\r\n            }}\r\n          </Mutation>\r\n        </App >\r\n      );\r\n\r\n    }\r\n\r\n    return (\r\n      <App\r\n        showNavigation={false}\r\n        title='Register'\r\n      >\r\n\r\n\r\n\r\n        <Mutation\r\n          mutation={SUBSCRIBE_MUTATION}\r\n          variables={{ input: { email } }}\r\n        >\r\n\r\n          {(subscribe, { loading, error, called }) => {\r\n            return <SubscribeContainer\r\n              subscribe={subscribe}\r\n              handleChange={this.handleChange}\r\n              email={email}\r\n              loading={loading}\r\n              error={error}\r\n              called={called}\r\n            />\r\n\r\n          }}\r\n\r\n        </Mutation>\r\n\r\n      </App>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nconst REGISTER_MUTATION = gql`\r\n    mutation Register($input: RegisterInput) {\r\n        Register(input: $input) {\r\n            token\r\n        }\r\n    }\r\n`\r\n\r\nexport default RegisterPage\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAQA;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAaA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AAKA;AACA;AACA;AAEA;AACA;AAFA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAMA;;;;AA5HA;AACA;AAgIA;AAQA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}